
## 구글 문서를 통해 팀원 다 같이 작성했던 내용들입니다 ##


크게 4파트로 나누고 각 파트별로 어떻게 발표할건지 적자

1~2번은 사실상 계획서발표때 했던 내용 살짝 정리해서 다시 쓰고 이번에 Dapp만들면서 개발환경 구축하는데 필요한 프로그램들 설명하는 정도만 추가하면 되지 않을지?

3번에 코딩 - 컴파일 - 배포 - 프론트구축 과정 설명
---------------------------------------------------------------------------------------------------------------------------
1. 프로젝트 개요 (계획서, UI, 목표 조금 더 구체적으로)
블록체인 학습 
> 멘토가 제공하는 블록체인 자료를 통한 학습 (강의 주제 표로 정리해서 추가)
> 블록체인 튜토리얼 사이트를 통한 실습 (크립토 좀비 사이트 이미지)
프로젝트 목표 구체화  
> 팀내 회의 및 멘토 피드백을 통한 프론트엔드 기능 추출 (기능목록표)
> 추출된 기능을 토대로 UI 디자인 작성 (UI 이미지)
>> 하지만 학습이 완료되지 않아 전체 Dapp 설계 및 구현은 미정 
>> Dapp 프로토타입 제작을 통해 학습 및 전체 Dapp 설계 수행 (프로토타입 설계 진행 이미지 - 적당히 화살표나 아이콘을 이용해서 학습과 구현을 동시에 하고있다는 느낌으로)

계획서에 추가했던 UI 계획
앱에 들어갈 기능
목표 : 솔리디티 언어로 작성된 컨트랙트(함수)를 트러플 프로그램을 이용하여 컴파일 및 배포를 하여 블록체인 환경에서 동작되는 투표 앱을 개발한다.
---------------------------------------------------------------------------------------------------------------------------                              2. 학습내용, 준비과정 (프로토타입 설계)
1. Dapp 프로토타입 구조도 작성 (Dapp - Web3 - JSON - 이더리움 구조도 이미지)
> 학습 내용을 토대로 구조도의 해당 요소들로 Dapp 을 구성하기로 결정
> 요소별 이유 설명 ( Dapp 프론트엔드 : 사용자의 조작 / 이더리움 : 연산 및 정보 저장 / JSON : … / Web3 : …)
2. Dapp 프로토타입 기능 및 UI 결정
> 프로토타입에 적용할 최소한의 기능 결정 (후보자 결정 / 후보자 투표 / 후보자 투표 수 추출) (프로토타입 기능목록표) 
> 결정된 기능에 따른 UI (html UI 이미지) (* 왜 PC UI 인가? -> 개발환경이 PC 라서 실제 테스트하기 쉽고, 프로토타입이라서 모바일 적용은 우선순위가 아니다)

크립토좀비에서 솔리디티 기본 문법을 익혔다
Remix에서 솔리디티 예제를 수행하며 문법과 컨트랙트 작성을 학습

사용한 도구 툴
현재
ganache : 가상 블록체인 환경 구축,
web3js : 이더리움과 상호작용하는데 사용하는 자바스크립트 라이브러리
-----
나중에
truffle : dapp개발에 사용되는 프레임워크 => 블록체인 컴파일과 배포하는 복잡성을 해결


---------------------------------------------------------------------------------------------------------------------------                              3. 프로토타입 구현           
   zastrin에서 했던거 이름 바꾸기

프로토타입 목적 : 스마트 계약을 작성하고 스마트 계약과 상호작용하는 법을 배우기 위해 프로토 타입을 만들어보며 연습, 스마트 계약을 컴파일하고 블록체인에 배포하는 과정, 커맨드 라인 node.js콘솔에서 테스트 하는 방법 익힘

 sol파일 작성 => 프로토타입을 먼저 구현하기 위해 주요 기능만 탑재(투표, 투표수확인, 후보자 확인) (솔리디티 언어의 사용이유 / 3가지 기능을 구현한 함수 이미지, 함수이름 눈에띄게)
 sol 파일 컴파일 = > 앞서 설치한 solc를 이용하여 sol파일을 컴파일 (컴파일의 의미와 solc 가 뭔지도 설명)
블록체인 배포 => node js 사용, deploy를 사용하여 컴파일된 sol파일을 ganache를 이용해 생성된 가상 블록체인에 배포 (ganache 를 먼저 실행하는 순서까지 언급 / nodejs 는 무엇인가, 기능 설명 / 노드 배포의 의미 설명, 이미지 첨부)
배포된 컨트랙트와 상호작용 => sol파일에 작성했던 함수(메소드)를 사용, 
ex) totalvoteFor을 사용하여 현재 누구에게 몇표가 투표되었는지 확인
 voteForCandidate를 이용하여 누군가에게 투표가 가능 (콘솔 창을 이용해서 프론트엔드 이전에 상호작용의 정상작동 확인 / ganaceh 창에서 interaction 이 발생하는 것 이미지 첨부)
프론트엔드 =>pc에서 작성된 컨트랙트가 동작될 수 있도록 임시로 html파일을 만들어 프론트엔드 구축 (html이 어떻게 이더리움, ganache 와 연결되는지 설명 : index.js 역할설명)
결과 화면 	
=> 기본적으로 간단한 코드와 함께 이 부분은 어떤 부분을 진행하는 것인지 설명
---------------------------------------------------------------------------------------------------------------------------            
4. 이후 일정
현재로서는 컴파일과 배포를 하는 방식이 복잡하여 후에 트러플을 사용하여 컴파일과 배포 진행 (컴파일 및 배포과정 최적화)
현재 작성한 컨트랙트에서 우리가 설계한 UI에 맞도록 기능을 추가 (미구현 기능 추가 구현)
임시로 만든 프론트엔드에서 설계되어있는 UI에 맞도록 프론트엔드 구축 (미구현 UI 추가 구현)
원래의 목표인 앱을 만들기 위해 pc가 아닌 안드로이드 환경에서 동작하도록 구축 (모바일 변환)
사설망이 아닌 실제 이더리움에 Dapp 연결

-논문 어떻게할지 정해야함


